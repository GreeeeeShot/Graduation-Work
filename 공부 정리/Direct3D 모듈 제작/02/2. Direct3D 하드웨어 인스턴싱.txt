● 하드웨어 인스턴싱
- 인스턴싱은 한 장면에서 같은 물체를 여러 번 그리되 위치나 방향, 척도, 재질, 텍스처 등을 달리 해서
그리는 것을 말한다.
- 하지만 일반 인스턴싱도 메모리 공간 절약을 제외하면 호출을 여러 번 해야 하는 것은 동일하기에 호출 부담이
줄어든 것은 아니다.
- 하드웨어 인스턴싱은 Direct3D가 추가적인 API 호출 부담이 없도록 하는 인스턴싱 메커니즘이다.
- 하드웨어 인스턴싱은 일괄 처리 기법을 이용해서 그리기 호출 횟수를 줄인다.





● 정점 셰이더
- 하드웨어 인스턴싱에서는 정점과 색인 자료 외에 각 '인스턴스별 자료'도 입력 조립기에 공급한다.
- 파이프라인은 그러한 자료를 이용해서 메시의 인스턴스 N개를 그린다.
코드.
struct VertexIn
{
	float3 PosL	: POSITION;
	float3 NormalL	: NORMAL;
	float2 Tex	: TEXCOORD;
	row_major float4x4 World	: WORLD;	// 인스턴스별 세계 행렬
	float4 Color	: COLOR;			// 인스턴스별 색상 정보
	uint InstanceId	: SV_InstanceID;		// 인스턴스 ID ; 텍스처 배열의 색인으로 쓰일 수 있다.
};
- 다음은 상수 버퍼에 있는 세계 행렬 대신 인스턴스별 세계 행렬을 사용해서 정점 좌표를 변환하는 정점 셰이더의 예이다.
또한 주어진 인스턴스별 색상을 픽셀 셰이더에 넘겨서, 각 인스턴스마다 개별적인 색상이 적용되게 한다.
코드.
struct VertexOut
{
	float4 PosH	: SV_POSITION;
	float3 PosW 	: POSITION;
	float3 NormalW	: NORMAL;
	float2 Tex	: TEXCOORD;
	float4 Color	: COLOR;
};

VertexOut VS(VertexIn vin)
{
	VertexOut vout;

	// 세계 공간으로 변환.
	vout.PosW = mul(float4(vin.PosL, 1.0f), vin.World).xyz;
	vout.NormalW = mul(vin.NormalL, (float3x3)vin.World);

	// 동차 절단 공간으로 변환
	vout.PosH = mul(float4(vout.PosW, 1.0f), gViewProj);

	// 정점 특성들을 출력한다. 이들은 삼각형 표면을 따라 보간된다.
	vout.Tex = mul(float4(vin.Tex, 0.0f, 1.0f), gTexTransform).xy;
	vout.Color = vin.Color;

	return vout;
}
- 픽셀 셰이더는 주변광 항과 분산광 항을 인스턴스별 색상을 이용해서 변조한다.
ambient += A*pin.Color;
diffuse += D*pin.Color;





● 입력 배치 객체 정의
① const D3D11_INPUT_ELEMENT_DESC InputLayoutDesc::InstancedBasic32[8] = 
{
	{"POSITION", 0, DXGI_FORMAT_R32G32B32_FLOAT, 0, 0, D3D11_INPUT_PER_VERTEX_DATA, 0},
	{"NORMAL",   0, DXGI_FORMAT_R32G32B32_FLOAT, 0, 12, D3D11_INPUT_PER_VERTEX_DATA, 0},
	{"TEXCOORD", 0, DXGI_FORMAT_R32G32_FLOAT, 0, 24, D3D11_INPUT_PER_VERTEX_DATA, 0},
	{ "WORLD", 0, DXGI_FORMAT_R32G32B32A32_FLOAT, 1, 0, D3D11_INPUT_PER_INSTANCE_DATA, 1 },
	{ "WORLD", 1, DXGI_FORMAT_R32G32B32A32_FLOAT, 1, 16, D3D11_INPUT_PER_INSTANCE_DATA, 1 },
	{ "WORLD", 2, DXGI_FORMAT_R32G32B32A32_FLOAT, 1, 32, D3D11_INPUT_PER_INSTANCE_DATA, 1 },
	{ "WORLD", 3, DXGI_FORMAT_R32G32B32A32_FLOAT, 1, 48, D3D11_INPUT_PER_INSTANCE_DATA, 1 },
	{ "COLOR", 0, DXGI_FORMAT_R32G32B32A32_FLOAT, 1, 64,  D3D11_INPUT_PER_INSTANCE_DATA, 1 }
};
// 해당 예는 두 개의 정점 버퍼를 사용하는데 각각 정점 자료를 담은 통상적인 정점 버퍼와 
// 인스턴스별 자료를 담은 인스턴스 버퍼이다. 이 둘은 입력 조립기 단계에 묶는다.

① D3D11_INPUT_ELEMENT_DESC의 D3D11_INPUT_CLASSIFICATION InputSlotClass;와 UINT InstanceDataStepRate;
- D3D11_INPUT_CLASSIFICATION InputSlotClass를 D3D11_INPUT_PER_INSTANCE_DATA로 설정하면 입력 원소를 인스턴스별 자료로 간주한다.
- UINT InstanceDataStepRate는 인스턴스별 자료 원소 하나 당 그릴 인스턴스 개수이다.





● 정점 버퍼와 인스턴스 버퍼
struct Basic32
{
	XMFLOAT3 Pos;
	XMFLOAT3 Normal;
	XMFLOAT2 Tex;
};

struct InstancedData
{
	XMFLOAT4X4 World;
	XMFLOAT4 Color;
};

UINT stride[2] = {sizeof(Vertex::Basic32), sizeof(InstancedData)};
UINT offset[2] = {0, 0};

ID3D11Buffer* vbs[2] = {mSkullVB, mInstancedBuffer};
md3dImmediateContext->IASetVertexBuffers(0, 2, vbs, stride, offset);
md3dImmediateContext->IASetInputLayout(InputLayouts::InstancedBasic32);





● 인스턴스 그리기
- 준비된 정점 자료와 인스턴스별 자료로 인스턴스들을 그릴 때에는 DrawIndexedInstanced 메서드를 사용한다.
void ID3D11DeviceContext::DrawIndexedInstanced(
	UINT IndexCountPerInstance,	// 이 그리기 호출에서 하나의 인스턴스를 정의하는 색인들의 개수(연속된 부분집합으로도 가능.)
	UINT InstanceCount,		// 그릴 인스턴스의 개수
	UINT StartIndexLocation,	// 색인 버퍼에서 그리기에 사용할 첫 원소의 색인
	INT BaaseVertexLocation,	// 기준 정점 위치, 즉 각 색인으로 정점을 가져올 때 색인 값에 더할 기준 값
	UINT StartInstanceLocation	// 인스턴스 버퍼에서 읽어올 첫 원소(인스턴스별 자료)의 색인.
);

ex.
md3dImmediateContext->DrawIndexedInstanced(
	mSkullIndexCount,	// 두개골 메시의 색인 개수
	mVisibleObjectCount,	// 그릴 인스턴스 개수
	0, 0, 0);





● 인스턴스 버퍼 만들기
- 인스턴스 버퍼는 다른 버퍼와 마찬가지로 ID3D11Buffer를 이용해서 만든다.
- 이 예에서는 인스턴스 버퍼를 동적 버퍼로 만들어 매 인스턴스마다 세계 행렬을 갱신한다.
- 가시적인 인스턴스들(절두체 선별을 통과한.)의 인스턴스별 자료를 버퍼에 복사(갱신)한다.
void InstancingAndCullingApp::BuildInstancedBuffer()
{
	const int n = 5;
	mInstancedData.resize(n*n*n);
	
	float width = 200.0f;
	float height = 200.0f;
	float depth = 200.0f;
	
	float x = -0.5f*width;
	float y = -0.5f*height;
	float z = -0.5f*depth;
	float dx = width / (n-1);
	float dy = height / (n-1);
	float dz = depth / (n-1);
	for(int k = 0; k < n; ++k)
	{
		for(int i = 0; i < n; ++i)
		{
			for(int j = 0; j < n; ++j)
			{
				// 인스턴스들을 3차원 격자 형태로 배치한다.
				mInstancedData[k*n*n + i*n + j].World = XMFLOAT4X4(
					1.0f, 0.0f, 0.0f, 0.0f,
					0.0f, 1.0f, 0.0f, 0.0f,
					0.0f, 0.0f, 1.0f, 0.0f,
					x+j*dx, y+i*dy, z+k*dz, 1.0f);
				
				// 색상을 무작위하게 설정한다.
				mInstancedData[k*n*n + i*n + j].Color.x = MathHelper::RandF(0.0f, 1.0f);
				mInstancedData[k*n*n + i*n + j].Color.y = MathHelper::RandF(0.0f, 1.0f);
				mInstancedData[k*n*n + i*n + j].Color.z = MathHelper::RandF(0.0f, 1.0f);
				mInstancedData[k*n*n + i*n + j].Color.w = 1.0f;
			}
		}
	}
	
	D3D11_BUFFER_DESC vbd;
	vbd.Usage = D3D11_USAGE_DYNAMIC;
	vbd.ByteWidth = sizeof(InstancedData) * mInstancedData.size();
	vbd.BindFlags = D3D11_BIND_VERTEX_BUFFER;
	vbd.CPUAccessFlags = D3D11_CPU_ACCESS_WRITE;
	vbd.MiscFlags = 0;
	vbd.StructureByteStride = 0;
	
    HR(md3dDevice->CreateBuffer(&vbd, 0, &mInstancedBuffer));
}
