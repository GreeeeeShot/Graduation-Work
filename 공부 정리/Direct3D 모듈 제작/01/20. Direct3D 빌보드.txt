● 나무 빌보드
- 정점 구조체
struct TreePointSprite
{
	XMFLOAT3 Pos;		// 세계 공간에서의 빌보드 중심 위치를 나타내는 점의 좌표
	XMFLOAT2 Size;		// 빌보드 사각형의 너비와 높이(세계 공간 단위로 비례된)
};
// 기하 셰이더는 점을 이 크기만큼의 사각형으로 확장한다. 
- 입력 배치
const D3D11_INPUT_ELEMENT_DESC InputLayoutDesc::TreePointSprite[2] =
{
	{"POSITION", 0, DXGI_FORMAT_R32G32B32_FLOAT, 0, 0, D3D11_INPUT_PER_VERTEX_DATA, 0},
	{"SIZE", 0, DXGI_FORMAT_R32G32_FLOAT, 0, 12, D3D11_INPUT_PER_VERTEX_DATA, 0}
};





● 나무 빌보드 효과 파일 내 기하 셰이더
코드.
//***************************************************************************************
// TreeSprite.fx by Frank Luna (C) 2011 All Rights Reserved.
//
// 기하 셰이더를 이용해서 점 스프라이트를 y축에 정렬된 카메라 방향 빌보드 사각형으로 확장한다.
//***************************************************************************************

#include "LightHelper.fx"
 
cbuffer cbPerFrame
{
	DirectionalLight gDirLights[3];
	float3 gEyePosW;

	float  gFogStart;
	float  gFogRange;
	float4 gFogColor;
};

cbuffer cbPerObject
{
	float4x4 gViewProj;
	Material gMaterial;
};

cbuffer cbFixed
{
	//
	// 텍스처가 사각형 전체에 입혀지도록 하는 텍스처 좌표를 계산한다.
	//

	float2 gTexC[4] = 
	{
		float2(0.0f, 1.0f),
		float2(0.0f, 0.0f),
		float2(1.0f, 1.0f),
		float2(1.0f, 0.0f)
	};
};

// 비수치 값들은 cbuffer에 추가할 수 없음.
Texture2DArray gTreeMapArray;			// 텍스처 배열

SamplerState samLinear
{
	Filter   = MIN_MAG_MIP_LINEAR;
	AddressU = CLAMP;
	AddressV = CLAMP;
};

struct VertexIn
{
	float3 PosW  : POSITION;
	float2 SizeW : SIZE;
};

struct VertexOut
{
	float3 CenterW : POSITION;
	float2 SizeW   : SIZE;
};

struct GeoOut
{
	float4 PosH    : SV_POSITION;
	float3 PosW    : POSITION;
	float3 NormalW : NORMAL;
	float2 Tex     : TEXCOORD;
	uint   PrimID  : SV_PrimitiveID;
};

VertexOut VS(VertexIn vin)
{
	VertexOut vout;

	// 자료를 그대로 기하 셰이더에 넘긴다.
	vout.CenterW = vin.PosW;
	vout.SizeW   = vin.SizeW;

	return vout;
}
 
 // 각 점을 사각형(정점 4개)으로 확장하므로, 기하 셰이더 실행 당 최대
 // 출력 정점 개수는 4이다.
[maxvertexcount(4)]
void GS(point VertexOut gin[1], 			// 정점 하나를 입력받는다.
	uint primID : SV_PrimitiveID, 			// 각 기본도형마다 입력 조립기 단계가 자동으로 생성하는 기본도형 ID이다.
	inout TriangleStream<GeoOut> triStream)		// 빌보드를 이루는 4개의 정점을 출력한다.
{	
	//
	// 빌보드가 y축에 정렬되어서 시점을 향하도록 하는,
	// 세계 공간을 기준으로 한 빌보드의 국소 좌표계를
	// 계산한다.
	//

	float3 up = float3(0.0f, 1.0f, 0.0f);
	float3 look = gEyePosW - gin[0].CenterW;
	look.y = 0.0f; // y 축 정렬이므로 xz 평면에 투영한다.
	look = normalize(look);
	float3 right = cross(up, look);

	//
	// 사각형을 이루는 삼각형 띠 정점들의 세계 공간 위치를
	// 계산한다.
	//

	float halfWidth  = 0.5f*gin[0].SizeW.x;
	float halfHeight = 0.5f*gin[0].SizeW.y;
	
	float4 v[4];
	v[0] = float4(gin[0].CenterW + halfWidth*right - halfHeight*up, 1.0f);
	v[1] = float4(gin[0].CenterW + halfWidth*right + halfHeight*up, 1.0f);
	v[2] = float4(gin[0].CenterW - halfWidth*right - halfHeight*up, 1.0f);
	v[3] = float4(gin[0].CenterW - halfWidth*right + halfHeight*up, 1.0f);

	//
	// 사각형 정점들을 동차 절단 공간으로 변환하고 
	// 하나의 삼각형 띠로서 출력한다.
	//
	GeoOut gout;
	[unroll]
	for(int i = 0; i < 4; ++i)
	{
		gout.PosH     = mul(v[i], gViewProj);
		gout.PosW     = v[i].xyz;
		gout.NormalW  = look;
		gout.Tex      = gTexC[i];
		gout.PrimID   = primID;			// 기하 셰이더는 단순히 기본도형 ID를 픽셀 셰이더에 넘겨준다
		
		triStream.Append(gout);			// 띠 형태로 저장된다.
	}
}

float4 PS(GeoOut pin, uniform int gLightCount, uniform bool gUseTexure, uniform bool gAlphaClip, uniform bool gFogEnabled) : SV_Target
{
	// 보간 때문에 법선이 더 이상 단위벡터가 아닐 수 있으므로 다시 정규화한다.
	pin.NormalW = normalize(pin.NormalW);

	// toEye 벡터는 조명 계산에 쓰인다.
	float3 toEye = gEyePosW - pin.PosW;

	// 시점과 이 표면 점 사이의 거리를 보관해 둔다.
	float distToEye = length(toEye);

	// 정규화한다.
	toEye /= distToEye;
   
	// 기본 텍스처 색상은 곱셈의 항등원.
	float4 texColor = float4(1, 1, 1, 1);
	if(gUseTexure)
	{
		// 텍스처에서 표본을 추출한다.
		float3 uvw = float3(pin.Tex, pin.PrimID%4);			// 픽셀 셰이더는 기본도형 ID를 이용해서 텍스처 배열의 특정 텍스처를 참조한다.
		texColor = gTreeMapArray.Sample( samLinear, uvw );

		if(gAlphaClip)
		{
			// 텍스처 표본의 알파 성분이 0.05보다 작으면 픽셀을 폐기한다.
			// 이 판정을 최대한 일찍 수행함으로써 셰이더를 일찍 벗어날
			// 수 있다. 그러면 셰이더 코드의 나머지 부분을 수행할 필요가
			// 없으므로 성능 향상에 도움이 된다.
			clip(texColor.a - 0.05f);
		}
	}

	//
	// 조명
	//

	float4 litColor = texColor;
	if( gLightCount > 0  )
	{
		// 합이 0인 재질 속성들로 시작한다.
		float4 ambient = float4(0.0f, 0.0f, 0.0f, 0.0f);
		float4 diffuse = float4(0.0f, 0.0f, 0.0f, 0.0f);
		float4 spec    = float4(0.0f, 0.0f, 0.0f, 0.0f);

		// 각 광원이 기여한 빛을 합한다. 
		[unroll]
		for(int i = 0; i < gLightCount; ++i)
		{
			float4 A, D, S;
			ComputeDirectionalLight(gMaterial, gDirLights[i], pin.NormalW, toEye, 
				A, D, S);

			ambient += A;
			diffuse += D;
			spec    += S;
		}

		// 변조 후 가산
		litColor = texColor*(ambient + diffuse) + spec;
	}

	//
	// 안개
	//

	if( gFogEnabled )
	{
		float fogLerp = saturate( (distToEye - gFogStart) / gFogRange ); 

		// Blend the fog color and the lit color.
		litColor = lerp(litColor, gFogColor, fogLerp);
	}

	// 안개 색상과 조명된 색상을 섞는다.
	litColor.a = gMaterial.Diffuse.a * texColor.a;

    return litColor;
}

//---------------------------------------------------------------------------------------
// Techniques--just define the ones our demo needs; you can define the other 
//   variations as needed.
//---------------------------------------------------------------------------------------
technique11 Light3
{
    pass P0
    {
        SetVertexShader( CompileShader( vs_5_0, VS() ) );
		SetGeometryShader( CompileShader( gs_5_0, GS() ) );
        SetPixelShader( CompileShader( ps_5_0, PS(3, false, false, false) ) );
    }
}

technique11 Light3TexAlphaClip
{
    pass P0
    {
        SetVertexShader( CompileShader( vs_5_0, VS() ) );
		SetGeometryShader( CompileShader( gs_5_0, GS() ) );
        SetPixelShader( CompileShader( ps_5_0, PS(3, true, true, false) ) );
    }
}
            
technique11 Light3TexAlphaClipFog
{
    pass P0
    {
        SetVertexShader( CompileShader( vs_5_0, VS() ) );
		SetGeometryShader( CompileShader( gs_5_0, GS() ) );
        SetPixelShader( CompileShader( ps_5_0, PS(3, true, true, true) ) );
    }
}





● SV_PrimitiveID
- 각 기본도형(을 이루는 정점 목록)마다 입력 조립기 단계가 자동으로 생성하는 기본도형 ID(uint 형식)이다.
- 기하 셰이더를 사용하지 않는 경우, 픽셀 셰이더가 기본도형 ID를 입력받을 수 있다.
- 하지만 기하 셰이더 단계를 사용하는 경우에는 기본도형 ID 매개변수가 반드시 기하 셰이더의 서명에 존재해야 한다.
- SV_PrimitiveID는 기하 셰이더에서 사용할 수도 있고 픽셀 셰이더에서도 사용할 수 있다. (둘 다도 가능.)





● SV_VertexID
- 정점 셰이더가 입력으로 들어오는 각 정점마다 입력 조립기 단계가 자동으로 생성하는 정점 ID(uint 형식)이다.
- Draw를 호출하는 경우 해당 정점들에 차례로 0, 1, ..., n-1번이 부여된다. 여기서 n은 그리기 호출의 정점 개수이다.
- DrawIndexed의 경우에는 각 정점에 해당 정점 색인 값과 동일한 식별 번호가 부여된다.
