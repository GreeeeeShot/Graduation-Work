● 안개 효과
코드.
cbuffer cbPerFrame
{
	DirectionalLight gDirLights[3];
	float3 gEyePosW;

	// 응용 프로그램이 프레임별로 안개 매개변수들을 설정할 수 있게 한다.
	// 덕분에 예를 들어 하루의 특정 시간대에만 안개를 적용하는 것이 가능하다.
	float  gFogStart;
	float  gFogRange;
	float4 gFogColor;
};

struct VertexIn
{
	float3 PosL    : POSITION;
	float3 NormalL : NORMAL;
	float2 Tex     : TEXCOORD;
};

struct VertexOut
{
	float4 PosH    : SV_POSITION;
	float3 PosW    : POSITION;
	float3 NormalW : NORMAL;
	float2 Tex     : TEXCOORD;
};

VertexOut VS(VertexIn vin)
{
	VertexOut vout;
	
	// 세계 공간으로 변환한다.
	vout.PosW    = mul(float4(vin.PosL, 1.0f), gWorld).xyz;
	vout.NormalW = mul(vin.NormalL, (float3x3)gWorldInvTranspose);
		
	// 동차 절단 공간으로 변환한다.
	vout.PosH = mul(float4(vin.PosL, 1.0f), gWorldViewProj);
	
	// 정점 특성들을 출력한다 (이후 삼각형 표면에 따라 보간됨.)
	vout.Tex = mul(float4(vin.Tex, 0.0f, 1.0f), gTexTransform).xy;

	return vout;
}
 
float4 PS(VertexOut pin, 
	uniform int gLightCount, 
	uniform bool gUseTexure, 
	uniform bool gAlphaClip, 
	uniform bool gFogEnabled) : SV_Target
{
	// 보간 때문에 법선이 더 이상 단위벡터가 아닐 수 있으므로 다시 정규화한다.
	pin.NormalW = normalize(pin.NormalW);

	// toEye 벡터는 조명 계산에 쓰인다.
	float3 toEye = gEyePosW - pin.PosW; 
	 
	// 시점과 이 표면 점 사이의 거리를 보관해 둔다.
	float distToEye = length(toEye);

	// 정규화한다.
	toEye /= distToEye;
	
	// 기본 텍스처 색상은 곱셈의 항등원
	float4 texColor = float4(1, 1, 1, 1);
	if(gUseTexure)
	{
		// 텍스처에서 표본을 추출한다.
		texColor = gDiffuseMap.Sample( samAnisotropic, pin.Tex );

		if(gAlphaClip)
		{
			// 텍스처 표본의 알파 성분이 0.1보다 작으면 픽셀을 폐기한다. => 거의 투명
			// 이 판정을 최대한 일찍 수행함으로써 셰이더를 일찍 벗어날 
			// 수 있다. 글면 셰이더 코드의 나머지 부분을 수행할 필요가
			// 없으므로 성능 향상에 도움이 된다.
			clip(texColor.a - 0.1f);
		}
	}
	 
	//
	// 조명.
	//

	float4 litColor = texColor;
	if( gLightCount > 0  )
	{  
		// 합이 0인 재질 속성들로 시작한다.
		float4 ambient = float4(0.0f, 0.0f, 0.0f, 0.0f);
		float4 diffuse = float4(0.0f, 0.0f, 0.0f, 0.0f);
		float4 spec    = float4(0.0f, 0.0f, 0.0f, 0.0f);

		// 각 광원이 기여한 빛을 합한다.
		[unroll]
		for(int i = 0; i < gLightCount; ++i)
		{
			float4 A, D, S;
			ComputeDirectionalLight(gMaterial, gDirLights[i], pin.NormalW, toEye, 
				A, D, S);

			ambient += A;
			diffuse += D;
			spec    += S;
		}

		// 변조 후 가산
		litColor = texColor*(ambient + diffuse) + spec;
	}

	//
	// 안개
	//

	if( gFogEnabled )
	{
		float fogLerp = saturate( (distToEye - gFogStart) / gFogRange ); 

		// 안개 색상과 조명된 색상을 섞는다.
		litColor = lerp(litColor, gFogColor, fogLerp);
	}

	// 일반적으로 분산광 재질의 알파 성분을 최종 알파 값으로 사용한다.
	litColor.a = gMaterial.Diffuse.a * texColor.a;

    return litColor;
}