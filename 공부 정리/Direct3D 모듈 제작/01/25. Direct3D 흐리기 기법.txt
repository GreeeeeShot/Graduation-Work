● 텍스처 대상 렌더링 기법
- 사실 후면 버퍼는 그냥 교환 사슬의 한 텍스처이며, 이곳에 렌더링하게 된다.
ID3D11Texture2D* backBuffer;
HR(mSwapChain->GetBuffer(0, __uuidof(ID3D11Texture2D),
	reinterpret_cast<void**>(&backBuffer)));				// SwapChain으로부터 ID3D11Texture2D 형태로 후면 버퍼 인터페이스 포인터를 가져온다.
HR(md3dDevice->CreateRenderTargetView(backBuffer, 0, &mRenderTargetView));	// 이에 대한 렌더 타겟 뷰를 생성한다.

md3dImmediateContext->OMSetRenderTargets(
	1, &mRenderTargetView, mDepthStencilView);
- '텍스처 대상 렌더링'이란 후면 버퍼와는 다른 '화면 밖(off-screen)'텍스처에 렌더링하는 것을 의미한다.
- 보통의 렌더링과 다른 점은 IDXGISwapChain::Present를 통해 제시를 하여도 화면에 표시되지 않는다는 것이다.
- 흐리기 기법은 화면 밖 텍스처 대상 렌더링(by. 계산 셰이더)을 통해 별도의 흐려진 텍스처(by. 가우스 흐리기)를 생성한 후 다시 후면 버퍼를 출력 병합기에
묶어서 통상적인 렌더링을 수행한다.
- 텍스처 대상 렌더링 기법은 다음과 같은 용도로 쓰일 수 있다.
① 그림자 매핑
② 화면 공간 주변광 차폐
③ 입방체 맵을 이용한 동적 반사





● 흐리기 구현의 개요
- 2차원 흐리기가 분리 가능이라고 간주하고 두 개의 1차원 흐리기, 즉 수직 흐리기와 수평 흐리기로 분리해서 계산을 수행한다.
- 흐리기를 구현하려면 읽기와 쓰기가 가능한 텍스처 버퍼 두 개가 필요하다.
- 따라서, 두 텍스처 각각에 셰이더 자원 뷰와 순서 없는 뷰가 필요하다.
- 한 텍스처를 A라고 부르고 또 따른 텍스처를 B라고 부른다고 할 때, 흐리기 알고리즘은 다음과 같이 진행된다.
① A에 대한 셰이더 자원 뷰(읽기 전용)를 계산 셰이더의 입력으로 설정한다(이것이 수평으로 흐려질 입력 이미지이다.)
② B에 대한 순서 없는 뷰(읽기 쓰기 전용)를 계산 셰이더의 출력으로 설정한다(이것이 흐려진 결과를 담을 출력 이미지이다.)
③ 스레드 그룹들을 배분해서 수평 흐리기 작업을 수행한다. 작업이 모두 끝나면 B는 수평으로 흐려진 결과 BlurH(I)를 다음 상태인데,
여기서 I는 흐리고자 하는 원본 이미지이다.

④ B에 대한 셰이더 자원 뷰를 계산 셰이더의 입력으로 설정한다(앞에서 수평으로 흐려진, 그리고 이제 수직으로 흐려질 이미지이다.)
⑤ A에 대한 순서 없는 뷰를 계산 셰이더의 출력으로 설정한다(흐려진 최종 결과가 저장될 출력이미지이다.)
⑥ 스레드 그룹들을 배분해서 수직 흐리기 작업을 수행한다. 작업이 모두 끝나면 텍스처 A는 흐려진 최종 결과 Blur(I)를 담은 상태인데,
여기서 I는 흐리고자 하는 원본 이미지이다.
// 이 과정은 분리 가능 흐리기 공식 Blur(I) = BlurV(BlurU(I))를 구현한다.
// 텍스처 A와 B가 번갈아서 계산 셰이더의 입력과 출력으로 쓰이나, 동시에 입력으로 쓰이거나 출력으로 쓰이지는 않음을 주목하자!





● 흐리기 구현 코드
// 화면 밖 텍스처와 텍스처 B는 창의 크기가 변하면 새롭게 갱신된 사이즈로 다시 만든다.
void BlurApp::OnResize()
{
	D3DApp::OnResize();

	XMMATRIX P = XMMatrixPerspectiveFovLH(0.25f*MathHelper::Pi,
		AspectRatio(), 1.0f, 1000.0f);
	XMStoreFloat4x4(&mProj, P);

	//
	// 자원들을 클라이언트 영역 크기에 맞게 다시 생성한다.
	//

	// 화면 밖 텍스처의 크기를 조정하고 뷰들(렌더 대상 뷰,
	// 셰이더 자원 뷰, 순서 없는 뷰)을 다시 만든다.
	BuildOffscreenViews();

	// 텍스처 B의 크기를 조정하고 뷰들(셰이더 자원 뷰, 순서 없는 뷰)을
	// 다시 만든다.
	mBlur.Init(md3dDevice, mClientWidth, mClientHeight,
		DXGI_FORMAT_R8G8B8A8_UNORM);
}

// 렌더링할 화면 밖 텍스처(A)를 응용 프로그램에서 생성한다.
void BlurApp::BuildOffscreenViews()
{
	// 성능을 위해 화면 밖 텍스처의 크기를 후면 버퍼의 4분의 1로 설정할 수 있다.
	// 이를 통해, 연산이 적게 수행되며, 또한 확대 시 자동으로 흐려지는 효과도 얻을 수 있다.
	ReleaseCOM(mOffscreenSRV);
	ReleaseCOM(mOffscreenRTV);
	ReleaseCOM(mOffscreenUAV);

	D3D11_TEXTURE2D_DESC texDesc;
	
	texDesc.Width     = mClientWidth;			// 리사이즈된 Width이다.
	texDesc.Height    = mClientHeight;			// 리사이즈된 Height이다.
	texDesc.MipLevels = 1;
	texDesc.ArraySize = 1;
	texDesc.Format    = DXGI_FORMAT_R8G8B8A8_UNORM;
	texDesc.SampleDesc.Count   = 1;  
	texDesc.SampleDesc.Quality = 0;  
	texDesc.Usage          = D3D11_USAGE_DEFAULT;
	texDesc.BindFlags      = D3D11_BIND_RENDER_TARGET | D3D11_BIND_SHADER_RESOURCE | D3D11_BIND_UNORDERED_ACCESS;	// D3D11_BIND_RENDER_TARGET이 추가되었다.
	texDesc.CPUAccessFlags = 0; 
	texDesc.MiscFlags      = 0;

	ID3D11Texture2D* offscreenTex = 0;
	HR(md3dDevice->CreateTexture2D(&texDesc, 0, &offscreenTex));

	// 널 값으로 설정하는 것은 텍스쳐를 이루는 원소들의 형식을 
	// 사용하는 모든 밉맵 수준에 대한 뷰를 생성하는 것을 의미한다.
	HR(md3dDevice->CreateShaderResourceView(offscreenTex, 0, &mOffscreenSRV));
	HR(md3dDevice->CreateRenderTargetView(offscreenTex, 0, &mOffscreenRTV));
	HR(md3dDevice->CreateUnorderedAccessView(offscreenTex, 0, &mOffscreenUAV));

	// 뷰는 텍스쳐를 참조하고 있기 때문에 생성된 텍스쳐 인터페이스를 해제할 수 있다.
	ReleaseCOM(offscreenTex);
}

// 텍스처 B의 크기를 조정하고 뷰들(세이더 자원 뷰, 순서 없는 뷰)을
// 다시 만든다.
void BlurFilter::Init(ID3D11Device* device, UINT width, UINT height, DXGI_FORMAT format)
{
	// 이전에 설정한 뷰들은 제거한다.
	ReleaseCOM(mBlurredOutputTexSRV);
	ReleaseCOM(mBlurredOutputTexUAV);

	mWidth = width;
	mHeight = height;
	mFormat = format;

	// 주의! 압축된 형식은 UAV(순서 없는 뷰)로 사용될 수 없다. 사용한다면,
	// 다음과 같은 에러를 얻을 것이다.
	// ERROR: ID3D11Device::CreateTexture2D: The format (0x4d, BC3_UNORM) 
	// cannot be bound as an UnorderedAccessView, or cast to a format that
	// could be bound as an UnorderedAccessView.  Therefore this format 
	// does not support D3D11_BIND_UNORDERED_ACCESS.

	D3D11_TEXTURE2D_DESC blurredTexDesc;
	blurredTexDesc.Width     = width;
	blurredTexDesc.Height    = height;
	blurredTexDesc.MipLevels = 1;
	blurredTexDesc.ArraySize = 1;
	blurredTexDesc.Format    = format;
	blurredTexDesc.SampleDesc.Count   = 1;
	blurredTexDesc.SampleDesc.Quality = 0;
	blurredTexDesc.Usage     = D3D11_USAGE_DEFAULT;
	blurredTexDesc.BindFlags = D3D11_BIND_SHADER_RESOURCE | D3D11_BIND_UNORDERED_ACCESS;
	blurredTexDesc.CPUAccessFlags = 0;
	blurredTexDesc.MiscFlags      = 0;

	ID3D11Texture2D* blurredTex = 0;
	HR(device->CreateTexture2D(&blurredTexDesc, 0, &blurredTex));

	D3D11_SHADER_RESOURCE_VIEW_DESC srvDesc;
	srvDesc.Format = format;
	srvDesc.ViewDimension = D3D11_SRV_DIMENSION_TEXTURE2D;
	srvDesc.Texture2D.MostDetailedMip = 0;
	srvDesc.Texture2D.MipLevels = 1;
	HR(device->CreateShaderResourceView(blurredTex, &srvDesc, &mBlurredOutputTexSRV));

	D3D11_UNORDERED_ACCESS_VIEW_DESC uavDesc;
	uavDesc.Format = format;
	uavDesc.ViewDimension = D3D11_UAV_DIMENSION_TEXTURE2D;
	uavDesc.Texture2D.MipSlice = 0;
	HR(device->CreateUnorderedAccessView(blurredTex, &uavDesc, &mBlurredOutputTexUAV));

	// 뷰는 텍스쳐를 참조하고 있기 때문에 생성된 텍스쳐 인터페이스를 해제할 수 있다.
	ReleaseCOM(blurredTex);
}

// 각 방향(수평과 수직)에 대한 스레드 그룹들을 구성하고 계산 셰이더로 실제 흐리기 연산을 수행하는 코드이다.
void BlurFilter::BlurInPlace(ID3D11DeviceContext* dc, 
	ID3D11ShaderResourceView* inputSRV, 
	ID3D11UnorderedAccessView* inputUAV,
	int blurCount)
{
	//
	// 계산 셰이더를 실행해서 화면 밖 텍스처를 흐린다.
	// 

	for(int i = 0; i < blurCount; ++i)
	{
		// 수평 흐리기 패스 (스레드 그룹은 1 x ceil(w/256)의 구성이다.)
		D3DX11_TECHNIQUE_DESC techDesc;
		Effects::BlurFX->HorzBlurTech->GetDesc( &techDesc );
		for(UINT p = 0; p < techDesc.Passes; ++p)
		{
			Effects::BlurFX->SetInputMap(inputSRV);
			Effects::BlurFX->SetOutputMap(mBlurredOutputTexUAV);
			Effects::BlurFX->HorzBlurTech->GetPassByIndex(p)->Apply(0, dc);

			// numGroupsX는 이미지의 픽셀 행 하나를 처리하는 데 필요한 스레드 그룹의
			// 개수이다. 각 그룹은 256개의 픽셀을 처리해야 한다(256은 계산 셰이더에
			// 정의되어 있다. 즉, 하나의 수평 스레드 그룹은 1x256 행렬로 볼 수 있다.)
			UINT numGroupsX = (UINT)ceilf(mWidth / 256.0f);
			dc->Dispatch(numGroupsX, mHeight, 1);						// 스레드 그룹들이 실행된다.
		}
	
		// 자원의 효율적인 관리를 위해 입력 텍스처를 계산 셰이더에서
		// 떼어낸다.
		ID3D11ShaderResourceView* nullSRV[1] = { 0 };
		dc->CSSetShaderResources( 0, 1, nullSRV );

		// 출력 텍스처도 계산 셰이더에서 떼어낸다(이 출력을 다음 패스의
		// 입력으로 사용한다). 하나의 자원을 동시에 입력과 출력에 모두
		// 사용할 수는 없다.
		ID3D11UnorderedAccessView* nullUAV[1] = { 0 };
		dc->CSSetUnorderedAccessViews( 0, 1, nullUAV, 0 );
	
		// 수직 흐리기 패스 (스레드 그룹은 ceil(h/256) x 1의 구성이다.)
		Effects::BlurFX->VertBlurTech->GetDesc( &techDesc );
		for(UINT p = 0; p < techDesc.Passes; ++p)
		{
			Effects::BlurFX->SetInputMap(mBlurredOutputTexSRV);
			Effects::BlurFX->SetOutputMap(inputUAV);
			Effects::BlurFX->VertBlurTech->GetPassByIndex(p)->Apply(0, dc);

			// numGroupsY는 이미지의 픽셀 열 하나를 처리하는 데 필요한 스레드 그룹의
			// 개수이다. 각 그룹은 256개의 픽셀을 처리해야 한다(256은 계산 셰이더에
			// 정의되어 있다. 즉, 하나의 수직 스레드 그룹은 256x1 행렬로 볼 수 있다.)
			UINT numGroupsY = (UINT)ceilf(mHeight / 256.0f);
			dc->Dispatch(mWidth, numGroupsY, 1);						// 스레드 그룹들이 실행된다.
		}
	
		dc->CSSetShaderResources( 0, 1, nullSRV );
		dc->CSSetUnorderedAccessViews( 0, 1, nullUAV, 0 );
	}

	// 계산 셰이더를 비활성화한다.
	dc->CSSetShader(0, 0, 0);
}





● 계산 셰이더 프로그램
- 경계를 넘으면 다음의 조건문으로 한정한다.
if(groupThreadID.x < gBlurRadius)
{
	// 이미지 왼쪽 경계 바깥의 표본을 왼쪽 경계로 한정한다.
	int x = max(dispatchThreadID.x - gBlurRadius, 0);
	gCache[groupThreadID.x] = gInput[int2(x, dispatchThreadID.y)];
}
if(groupThreadID.x >= N-gBlurRadius)
{
	// 이미지 오른쪽 경계 바깥의 표본을 오른쪽 경계로 한정한다.
	int x = min(dispatchThreadID.x + gBlurRadius, gInput.Length.x-1);
	gCache[groupThreadID.x+2*gBlurRadius] = gInput[int2(x, dispatchThreadID.y)];
}

// 이미지 범위 밖의 표본을 이미지 경계로 한정한다.
gCache[groupThreadID.x+gBlurRadius] = gInput[min(dispatchThreadID.xy, gInput.Length.xy-1)];

// 다음은 계산 셰이더 프로그램을 포함한 효과 파일 전체 코드이다.
//=============================================================================
// Blur.fx by Frank Luna (C) 2011 All Rights Reserved.
//
// 흐리기 반지름 5로 분리 가능 흐리기를 수행한다. 
//=============================================================================

cbuffer cbSettings
{
	// 가중 평균을 내기 위한 가중치이다.
	float gWeights[11] = 
	{
		// 흐리기 반지름이 5이므로 6개의 가중치를 둔다.
		0.05f, 0.05f, 0.1f, 0.1f, 0.1f, 0.2f, 0.1f, 0.1f, 0.1f, 0.05f, 0.05f,		
	};
};

cbuffer cbFixed
{
	// 흐리기 반지름
	static const int gBlurRadius = 5;		
};

Texture2D gInput;			
RWTexture2D<float4> gOutput;		

#define N 256
#define CacheSize (N + 2*gBlurRadius)
groupshared float4 gCache[CacheSize];

[numthreads(N, 1, 1)]		// 초기 수평 흐리기 알고리즘을 위해 스레드 그룹 구성을 256*1*1로 한다.(행 행렬)
void HorzBlurCS(int3 groupThreadID : SV_GroupThreadID,
				int3 dispatchThreadID : SV_DispatchThreadID)
{
	//
	// 대역폭을 줄이기 위해 지역 스레드 저장소를 채운다. 흐리기 반지름 때문에,
	// 픽셀 N개(하나의 스레드 그룹이 담당하는)를 흐리려면 N+2*BlurRadisu개의 픽셀을 읽어야 한다.
	//
	// 이 스레드 그룹은 N개의 스레드를 실행한다. 여분의 픽셀 2*BlurRadius개를
	// 위해, 2*BlurRadius개의 스레드가 픽셀을 하나 더 추출하게 한다.
	if(groupThreadID.x < gBlurRadius)
	{
		// 이미지 범위 밖의 표본을 이미지 경계로 한정한다.
		int x = max(dispatchThreadID.x - gBlurRadius, 0);
		gCache[groupThreadID.x] = gInput[int2(x, dispatchThreadID.y)];
	}
	if(groupThreadID.x >= N-gBlurRadius)
	{
		// 이미지 범위 밖의 표본을 이미지 경계로 한정한다.
		int x = min(dispatchThreadID.x + gBlurRadius, gInput.Length.x-1);
		gCache[groupThreadID.x+2*gBlurRadius] = gInput[int2(x, dispatchThreadID.y)];
	}

	// 이미지 범위 밖의 표본을 이미지 경계로 한정한다.
	gCache[groupThreadID.x+gBlurRadius] = gInput[min(dispatchThreadID.xy, gInput.Length.xy-1)];

	// 모든 스레드가 여기까지의 작업을 완수할 때까지 기다린다.
	GroupMemoryBarrierWithGroupSync();
	
	//
	// 이제 각 픽셀을 흐린다.
	//

	float4 blurColor = float4(0, 0, 0, 0);
	
	[unroll]
	for(int i = -gBlurRadius; i <= gBlurRadius; ++i)
	{
		int k = groupThreadID.x + gBlurRadius + i;
		
		blurColor += gWeights[i+gBlurRadius]*gCache[k];
	}
	
	// dispatchThreadID.xy가 텍스쳐에서 벗어나는 색인을 반환하면 '무연산'이 이루어진다.
	gOutput[dispatchThreadID.xy] = blurColor;
}

[numthreads(1, N, 1)]
void VertBlurCS(int3 groupThreadID : SV_GroupThreadID,
				int3 dispatchThreadID : SV_DispatchThreadID)
{
	//
	// 대역폭을 줄이기 위해 지역 스레드 저장소를 채운다. 흐리기 반지름 때문에,
	// 픽셀 N개(하나의 스레드 그룹이 담당하는)를 흐리려면 N+2*BlurRadisu개의 픽셀을 읽어야 한다.
	//
	// 이 스레드 그룹은 N개의 스레드를 실행한다. 여분의 픽셀 2*BlurRadius개를
	// 위해, 2*BlurRadius개의 스레드가 픽셀을 하나 더 추출하게 한다.
	if(groupThreadID.y < gBlurRadius)
	{
		// 이미지 범위 밖의 표본을 이미지 경계로 한정한다.
		int y = max(dispatchThreadID.y - gBlurRadius, 0);
		gCache[groupThreadID.y] = gInput[int2(dispatchThreadID.x, y)];
	}
	if(groupThreadID.y >= N-gBlurRadius)
	{
		// 이미지 범위 밖의 표본을 이미지 경계로 한정한다.
		int y = min(dispatchThreadID.y + gBlurRadius, gInput.Length.y-1);
		gCache[groupThreadID.y+2*gBlurRadius] = gInput[int2(dispatchThreadID.x, y)];
	}
	
	// 이미지 범위 밖의 표본을 이미지 경계로 한정한다.
	gCache[groupThreadID.y+gBlurRadius] = gInput[min(dispatchThreadID.xy, gInput.Length.xy-1)];


	// 모든 스레드가 여기까지의 작업을 완수할 때까지 기다린다.
	GroupMemoryBarrierWithGroupSync();
	
	//
	// 이제 각 픽셀을 흐린다.
	//

	float4 blurColor = float4(0, 0, 0, 0);
	
	[unroll]
	for(int i = -gBlurRadius; i <= gBlurRadius; ++i)
	{
		int k = groupThreadID.y + gBlurRadius + i;
		
		blurColor += gWeights[i+gBlurRadius]*gCache[k];
	}
	
	// dispatchThreadID.xy가 텍스쳐에서 벗어나는 색인을 반환하면 '무연산'이 이루어진다.
	gOutput[dispatchThreadID.xy] = blurColor;
}

technique11 HorzBlur
{
    pass P0
    {
	SetVertexShader( NULL );
	SetPixelShader( NULL );
	SetComputeShader( CompileShader( cs_5_0, HorzBlurCS() ) );
    }
}

technique11 VertBlur
{
    pass P0
    {
	SetVertexShader( NULL );
        SetPixelShader( NULL );
	SetComputeShader( CompileShader( cs_5_0, VertBlurCS() ) );
    }
}
