● 추가 버퍼와 소비 버퍼는 언제 쓰는가?
- 빠른 갱신이 필요하지만, 갱신되는 순서나 출력 버퍼에 쓰여지는 순서가 중요하지 않을 때 사용한다.
- 색인화에 신경을 쓸 필요가 없다.
코드.
struct Particle
{
	float3 Position;
	float3 Velocity;
	float3 Acceleration;
};

float TimeStep = 1.0f / 60.0f;

ConsumeStructuredBuffer<Particle> gInput;
AppendStructuredBuffer<Particle> gOutput;
[numthreads(16, 16, 1)]
void CS()
{
	// 입력 버퍼에서 자료 원소 하나를 소비한다.
	Particle p = gInput.Consume();
	
	p.Velocity += p.Acceleration*TimeStep;
	p.Position += p.Velocity*TimeStep;

	// 정규화된 벡터를 출력 버퍼에 추가한다.
	gOutput.Append(p);
}
- 일단 소비된 자료 원소는 다른 스레드에서 다시 소비하지 못한다. 즉, 하나의 원소는 정확히 하나의 스레드에서 소비된다.
- 일반적으로 입력 버퍼의 i번째 원소가 반드시 출력 버퍼의 i번째 원소에 기록되리라는 보장은 없다.
- 응용 프로그램에서 추가, 소비 버퍼를 생성, 설정하는 방법은 보통의 구조적 버퍼에서와 거의 동일하다. 유일한 차이는
순서 없는 뷰를 생성할 때 이것이 추가 또는 소비 버퍼로 쓰일 것임을 뜻하는 플래그를 지정해 주어야 한다는 것이다.
코드.
D3D11_UNORDERED_ACCESS_VIEW_DESC uavDesc;
uavDesc.Format = DXGI_FORMAT_UNKNOWN;
uavDesc.ViewDimension = D3D11_UAV_DIMENSION_BUFFER;
uavDesc.Buffer.FirstElement = 0;
uavDesc.Buffer.Flags = D3D11_BUFFER_UAV_FLAG_APPEND;
uavDesc.Buffer.NumElements = mNumElements;		// 추가 버퍼의 크기는 동적으로 커지지 않으므로, 충분한 크기를 갖추고 있어야 한다.
