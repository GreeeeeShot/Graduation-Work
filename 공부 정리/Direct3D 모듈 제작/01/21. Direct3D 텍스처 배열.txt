● 텍스처 배열
- C++ 코드에서 텍스처 배열은 ID3D11Texture2D 인터페이스로 대표된다.
- 효과 파일에서는 텍스처 배열을 Texture2DArray 형식으로 나타낸다.
- 텍스처 배열을 Texture2DArray 형식이 아닌 Texture2D TexArrayName[n];과 같은 형식으로 나타내면
괄호 [] 안에는 변수가 아닌 리터럴 형식만 사용해야 한다. 따라서, 변수 형식을 사용하고 싶으면(int i와 같은)
Texture2DArray를 사용해야 한다.
- 한 번의 그리기 호출로 여러 종류의 기본도형들에 대해 서로 다른 텍스처를 입힐 수 있다.
- 텍스처 배열은 Sample 함수의 인자로 텍스처 배열의 한 텍스처를 선택하는 색인을 입력받아야 하는데 그것은 다음과 같다.
float3 uvw = float3(pin.Tex, pin.PrimID%4);		// 벡터의 세 번째 요소는 텍스처 색인을 의미한다.
texColor = gTreeMapArray.Sample(samLinear, uvw); 	// Sample 함수는 텍스처 좌표 및 텍스처 색인을 입력으로 받는다.





● 텍스처 배열의 적재
- 텍스처 배열을 적재하는 과정은 다음과 같다.
① 시스템 메모리 안에서 각각의 텍스처를 파일로부터 생성한다.
② 텍스처 배열을 생성한다.
③ 각 텍스처를 텍스처 배열의 각 원소에 복사한다.
④ 텍스처 배열에 대한 셰이더 자원 뷰를 생성한다.
코드.
ID3D11ShaderResourceView* d3dHelper::CreateTexture2DArraySRV(
		ID3D11Device* device, ID3D11DeviceContext* context,
		std::vector<std::wstring>& filenames,
		DXGI_FORMAT format,
		UINT filter, 
		UINT mipFilter)
{
	//
	// 각 텍스처 원소를 파일로부터 '개별적'으로 적재한다. 이 텍스처들은
	// GPU가 사용하는 것이 아니다(결속 플래그가 0). 이들은 그냥 단순히 파일에서 
	// 이미지 자료를 적재하기 위한 것일 뿐이다. CPU에서 자원을 읽어야
	// 하므로 용도를 예비(staging)으로 설정한다.
	//

	UINT size = filenames.size();			// std::vector<std::wstring>&이 참조하는 벡터에 삽입되어 있는 텍스처 파일 개수

	std::vector<ID3D11Texture2D*> srcTex(size);	// 텍스처 파일 개수만큼의 원소를 지닌 벡터 객체 srcTex를 생성한다.
	for(UINT i = 0; i < size; ++i)
	{
		D3DX11_IMAGE_LOAD_INFO loadInfo;

        	loadInfo.Width  = D3DX11_FROM_FILE;
        	loadInfo.Height = D3DX11_FROM_FILE;
        	loadInfo.Depth  = D3DX11_FROM_FILE;
        	loadInfo.FirstMipLevel = 0;
       		loadInfo.MipLevels = D3DX11_FROM_FILE;
        	loadInfo.Usage = D3D11_USAGE_STAGING;						// CPU가 GPU로부터 읽어올 수 있다.
        	loadInfo.BindFlags = 0;								// 이 텍스처들은 GPU가 사용하는 것이 아니다.
        	loadInfo.CpuAccessFlags = D3D11_CPU_ACCESS_WRITE | D3D11_CPU_ACCESS_READ;
        	loadInfo.MiscFlags = 0;
        	loadInfo.Format = format;
        	loadInfo.Filter = filter;
        	loadInfo.MipFilter = mipFilter;
		loadInfo.pSrcInfo  = 0;

        	HR(D3DX11CreateTextureFromFile(device, filenames[i].c_str(), 			// c_str()은 std::wstring 내 메서드이다.
			&loadInfo, 0, (ID3D11Resource**)&srcTex[i], 0));			// srcTex[i](ID3D11Texture2D*)는 적재된 텍스처 자료를 가리키는 인터페이스 포인터이다.
	}

	//
	// 텍스처 배열을 생성한다. 텍스처 배열의 모든 원소는
	// 형식과 크기가 동일하다.
	//

	D3D11_TEXTURE2D_DESC texElementDesc;			
	srcTex[0]->GetDesc(&texElementDesc);			// GPU에 적재된 텍스처 자료로 부터 D3D11_TEXTURE2D_DESC 정보를 얻어온다.
	// 텍스처 배열을 이루는 각 원소를 서술하는 구조체 내용이 srcTex[0]와 같다고 가정한다.

	D3D11_TEXTURE2D_DESC texArrayDesc;
	texArrayDesc.Width              = texElementDesc.Width;
	texArrayDesc.Height             = texElementDesc.Height;
	texArrayDesc.MipLevels          = texElementDesc.MipLevels;
	texArrayDesc.ArraySize          = size;
	texArrayDesc.Format             = texElementDesc.Format;
	texArrayDesc.SampleDesc.Count   = 1;
	texArrayDesc.SampleDesc.Quality = 0;
	texArrayDesc.Usage              = D3D11_USAGE_DEFAULT;
	texArrayDesc.BindFlags          = D3D11_BIND_SHADER_RESOURCE;
	texArrayDesc.CPUAccessFlags     = 0;
	texArrayDesc.MiscFlags          = 0;

	ID3D11Texture2D* texArray = 0;
	HR(device->CreateTexture2D( &texArrayDesc, 0, &texArray));

	//
	// 개별 텍스처 원소를 텍스처 배열에 복사한다.
	//

	// 각각의 텍스처 원소에 대해
	for(UINT texElement = 0; texElement < size; ++texElement)
	{
		// 각각의 밉맵 수준에 대해
		for(UINT mipLevel = 0; mipLevel < texElementDesc.MipLevels; ++mipLevel)
		{
			D3D11_MAPPED_SUBRESOURCE mappedTex2D;
			HR(context->Map(srcTex[texElement], mipLevel, D3D11_MAP_READ, 0, &mappedTex2D));

			context->UpdateSubresource(
				texArray, 				// 대상 자원 객체(ID3D11Resource)
				D3D11CalcSubresource(			// 대상 자원에서 갱신할 부분자원을 가리키는 색인
					mipLevel, 
					texElement, 
					texElementDesc.MipLevels),
				0, 					// 갱신할 대상 부분자원의 영역을 지정하는 D3D11_BOX 인스턴스를 가리키는 포인터. 부분자원 전체를 갱신하고 싶다면 널 값을 지정한다.
				mappedTex2D.pData, 			// 원본 자료를 가리키는 포인터
				mappedTex2D.RowPitch, 			// 원본 자료 한 행의 바이트 단위 크기(바이트 개수)
				mappedTex2D.DepthPitch);		// 원본 자료의 깊이 조각(depth slice) 하나의 바이트 단위 크기	(해당 예제에서는 불필요)

			context->Unmap(srcTex[texElement], mipLevel);
		}
	}	

	//
	// 텍스처 배열에 대한 자원 뷰를 생성한다.
	//
	
	D3D11_SHADER_RESOURCE_VIEW_DESC viewDesc;
	viewDesc.Format = texArrayDesc.Format;
	viewDesc.ViewDimension = D3D11_SRV_DIMENSION_TEXTURE2DARRAY;
	viewDesc.Texture2DArray.MostDetailedMip = 0;
	viewDesc.Texture2DArray.MipLevels = texArrayDesc.MipLevels;
	viewDesc.Texture2DArray.FirstArraySlice = 0;
	viewDesc.Texture2DArray.ArraySize = size;

	ID3D11ShaderResourceView* texArraySRV = 0;
	HR(device->CreateShaderResourceView(texArray, &viewDesc, &texArraySRV));	// 텍스처 배열에 대한 자원 뷰를 생성한다.

	//
	// 마무리--필요한 것은 자원 뷰뿐이다.
	//

	ReleaseCOM(texArray);

	for(UINT i = 0; i < size; ++i)
		ReleaseCOM(srcTex[i]);

	return texArraySRV;
}

// 위 함수는 응용 프로그램 초기화 시점에서 호출되며 나무 이미지들의 텍스처 배열을 생성한다.
ID3D11ShaderResourceView* mTreeTextureMapArraySRV;

std::vector<std::wstring> treeFilenames;
treeFilenames.push_back(L"Textures/tree0.dds");
treeFilenames.push_back(L"Textures/tree1.dds");
treeFilenames.push_back(L"Textures/tree2.dds");
treeFilenames.push_back(L"Textures/tree3.dds");

mTreeTextureMapArraySRV = d3dHelper::CreateTexture2DArraySRV(
md3dDevice, md3dImmediateContext, treeFilenames, DXGI_FORMAT_R8G8B8A8_UNORM);