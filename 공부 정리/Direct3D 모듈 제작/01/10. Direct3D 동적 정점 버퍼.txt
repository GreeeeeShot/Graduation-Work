● 동적 정점 버퍼
- 시간의 흐름에 따라 갱신되는 메시를 표현할 수 있다.
- 복잡한 물리 계산과 충돌 검출을 수반하는 입자 시스템에 쓰일 수 있다.





● 동적 정점 버퍼 생성
- 버퍼의 용도를 반드시 D3D11_USAGE_DYNAMIC으로 지정해야 한다.
- CPU 접근 플래그를 반드시 D3D11_CPU_ACCESS_WRITE로 지정해야 한다.

코드.
D3D11_BUFFER_DESC vbd;
vbd.Usage = D3D11_USAGE_DYNAMIC;				// (★)
vbd.ByteWidth = sizeof(Vertex) * mWaves.VertexCount();
vbd.BindFlags = D3D11_BIND_VERTEX_BUFFER;
vbd.CPUAccessFlags = D3D11_CPU_ACCESS_WRITE;			// (★)
vbd.MiscFlags = 0;
HR(md3dDevice->CreateBuffer(&vbd, 0, &mWavesVB));





● 동적 정점 버퍼 갱신
코드.
D3D11_MAPPED_SUBRESOURCE mappedData;
HR(md3dImmediateContext->Map(
	mWavesVB,			// 읽기·쓰기 접근을 원하는 자원을 가리키는 포인터(ID3D11Resource) ; 버퍼뿐만 아니라 텍스처 자원도 가리킬 수 있다.	 
①	0, 				// 그 자원에 담긴 부분자원의 색인으로 지금은 0으로 세팅해두자.
	D3D11_MAP_WRITE_DISCARD, 	// 자원들에 공통인 플래그이다.
	0, 				// 그냥 0으로 세팅해두자.
②	&mappedData));			// D3D11_MAPPED_SUBRESOURCE 구조체를 가리키는 포인터이다. 이를 통해 버퍼에 R/W가 가능해진다.

Vertex* v = reinterpret_cast<Vertex*>(mappedData.pData);
for(UINT i = 0; i < mWaves.VertexCount(); ++i)
{
	v[i].Pos = mWaves[i];
	v[i].Color = XMFLOAT4(0.0f, 0.0f, 0.0f, 1.0f);
}

md3dImmediateContext->Unmap(mWavesVB, 0);	// 버퍼 갱신 후 반드시 해당 메서드를 호출해주어야 한다.

① D3D11_MAP MapType
- 자원들에 공통인 플래그로, 다음 값들 중 하나이다.
⒜ D3D11_MAP_WRITE_DISCARD : 하드웨어에게 현재 버퍼를 폐기하고 새 버퍼를 할당해서 그 버퍼를 돌려달라고 지시한다.
이렇게 하면 새로 할당된 버퍼에 자료를 기록하는 동안 하드웨어가 폐기된 버퍼에 렌더링 작업을 계속 진행할 수 있으므로
하드웨어의 실행이 일시적으로 멈추는 일이 방지된다.
⒝ D3D11_MAP_WRITE_NO_OVERWRITE : 하드웨어에게 응용 프로그램이 버퍼의 초기화되지 않은 부분에만 자료를 기록할 것이라고
알려준다. 이 경우에도, 버퍼의 미초기화 부분에 자료를 기록하는 동안 하드웨어가 이전에 기록된 기하구조의 렌더링을
계속 진행할 수 있으므로 하드웨어의 실행이 멈추는 일이 방지된다.
⒞ D3D11_MAP_READ : GPU 버퍼의 복사본을 시스템 메모리로 읽어 들여야 하는 예비(staging) 버퍼에 쓰이는 값이다.

② D3D11_MAPPED_SUBRESOURCE *pMappedResource
typedef struct D3D11_MAPPED_SUBRESOURCE {
	void *pData;		// 읽고 쓸 수 있는 자원의 생(raw) 메모리 블록을 가리키는 포인터. 캐스팅할 필요가 있다.
	UINT RowPitch;		// 자원의 자료 한 줄의 바이트 단위 크기이다.
	UINT DepthPitch;	// 자원의 자료 한 페이지의 바이트 단위 크기이다.
} D3D11_MAPPED_SUBRESOURCE;
// 1차원 자료 배열인 정점 버퍼와 색인 버퍼의 경우 RowPitch와 DepthPitch가
// 서로 정점 또는 색인 버퍼의 바이트 단위 크기로 같다. 





● Direct3D의 최근 버전의 동적 버퍼의 필요성을 줄여주는 새로운 기능
- 간단한 애니메이션은 정점 셰이더에서 수행 가능
- 텍스처로의 렌더링 기능 또는 계산 셰이더, 그리고 정점 텍스처 조회 기능을 이용하면
시뮬레이션을 전적으로 GPU에서 실행하는 것이 가능하다.
- 기하 셰이더를 이용하면, 예전에는 CPU에서 수행해야 했던 기본도형의 생성 및 파괴 작업을 
GPU에서 수행할 수 있다.