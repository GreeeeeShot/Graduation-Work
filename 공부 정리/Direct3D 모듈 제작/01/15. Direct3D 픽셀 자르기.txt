● 픽셀 자르기
float4 PS(VertexOut pin, 
	uniform int gLightCount, 
	uniform bool gUseTexure, 
	uniform bool gAlphaClip, 
	uniform bool gFogEnabled) : SV_Target
{
	// 보간 때문에 법선이 더 이상 단위벡터가 아닐 수 있으므로 다시 정규화한다.
	pin.NormalW = normalize(pin.NormalW);

	// toEye는 법선 벡터에 쓰인다.
	float3 toEye = gEyePosW - pin.PosW; 
	 
	// 시점과 이 표면 점 사이의 거리를 보관해 둔다.
	float distToEye = length(toEye);

	// 정규화한다.
	toEye /= distToEye;
	
	// 기본 텍스처 색상은 곱셈의 항등원
	float4 texColor = float4(1, 1, 1, 1);
	if(gUseTexure)
	{
		// 텍스처에서 표본을 추출한다.
		texColor = gDiffuseMap.Sample( samAnisotropic, pin.Tex );

		if(gAlphaClip)
		{
			// 텍스처 표본의 알파 성분이 0.1보다 작으면 픽셀을 폐기한다.
			// 이 판정을 최대한 일찍 수행함으로써 셰이더를 일찍 벗어날 
			// 수 있다. 그러면 셰이더 코드의 나머지 부분을 수행할 필요가
			// 없으므로 성능 향상에 도움이 된다.
			clip(texColor.a - 0.1f);	// clip의 인자로 0 미만의 값이 주어지면 픽셀을 자른다.
		}
	}
	...
// clip 함수는 픽셀 셰이더 내부에서만 사용할 수 있는 HLSL 내장 함수이다.





● 픽셀 자르기 효과
- 혼합 계산이 필요하지 않다.
- 그리기 순서가 영향을 미치지 않는다.
- 픽셀을 일찍 폐기하면 픽셀 셰이더의 나머지 명령들을 생략할 수 있다.





● 뒷면의 모양도 보이게 하기 위한 래스터화기 렌더 상태 설정
코드. 
D3D11_RASTERIZER_DESC noCullDesc;
ZeroMemory(&noCullDesc, sizeof(D3D11_RASTERIZER_DESC));
noCullDesc.FillMode = D3D11_FILL_SOLID;
noCullDesc.CullMode = D3D11_CULL_NONE;
noCullDesc.FrontCounterClockwise = false;
noCullDesc.DepthClipEnable = true;

ID3D11RasterizerState* noCullRS;
HR(device->CreateRasterizerState(&noCullDesc, &NoCullRS));