● GameTimer 클래스
class GameTimer
{
public:
	Gametimer();

	float GameTime () const;	// 초 단위				; 주파수 역수를 mSecondsPerCount에 설정 및 멤버 변수 초기화 
	float DeltaTime () const;	// 초 단위				; 경과 시간을 반환한다.

	void Reset ();			// 메시지 루프 이전에 호출해야 함
	void Start ();			// 타이머 시작·재개 시 호출해야 함
	void Stop ();			// 일시정지 시 호출해야 함
	void Tick ();			// 매 프레임마다 호출해야 함		; 프레임 간 경과 시간을 구하고 mDeltaTime에 저장

private:
	double mSecondsPerCount;	// 생성자에서 초기화된 이후에 일반적으로 바뀔 일이 없다. (고정 값)
	double mDeltaTime;		// 프레임 간 경과 시간을 담는다.
	
	__int64 mBaseTime;		// 응용 프로그램이 시작한 시간 (고정 값)
	__int64 mPausedTime;		// 일시정지된 이후 누적된 시간
	__int64 mStopTime;		// 일시정지된 시점의 시간
	__int64 mPrevTime;		// 현재 프레임 갱신 이전에 프레임 갱신이 완료되었던 그 당시 시간
	__int64 mCurrTime;		// 현재 프레임이 갱신된 현재 시간

	bool mStopped;
};

참고.
- __int64 mBaseTime; __int64 mPausedTime; __int64 mStopTime;은 (일시정지된 시간을 제외한)전체 시간을 구현하기 위해
필요한 변수들이다.





● GameTimer 생성자
- 성능 카운터의 주파수(초당 개수)를 조회해서 개수당 초 수를 private 멤버 변수 mSecondsPerCount에 설정한다.

코드.
Gametimer::GameTimer()
	: 
	mSecondsPerCount(0, 0), 
	mDeltaTime(-1.0),		// 초 단위 
	mBaseTime(0),
	mPausedTime(0),
	mPrevTime(0),			// 주파수 단위 (초당 개수)
	mCurrTime(0),			// 주파수 단위
	mStopped(false)
{
	__int64 countsPerSec;						// 조회한 주파수를 담기 위한 64비트 정수형 지역 변수
	QueryPerformanceFrequency((LARGE_INTEGER*) &countsPerSec);	// 주파수를 조회한다.
	mSecondsPerCount = 1.0 / (double) countsPerSec;			// 주파수에 역수를 취해 개수당 초 수를 mSecondsPerCount에 저장한다.
}





● GameTimer::Reset()
- GameTimer의 멤버 변수들 값을 초기화한다.

코드.
void GameTimer::Reset()
{
	__int64 currTime;
	QueryPerformanceCounter((LARGE_INTEGER*) &currTime);

	mBaseTime = currTime;
	mPrevTime = currTime;
	mStopTime = 0;
	mStopped = false;
}





● 프레임 간 경과 시간 구하기
코드.
void GameTimer::Tick()
{
	if(mStopped)			// 일시정지가 되었다면 경과 시간이 매번 0.0초가 될 것이다.
	{
		mDeltaTime = 0.0;
		return;
	}

	// 이번 프레임의 시간을 얻는다.
	__int64 currTime;
	QueryPerformanceCounter((LARGE_INTEGER*) &currTime);		// 해당 함수는 현재의 시간을 개수로 반환한다. (1/주파수 초당 1개 추가)
	mCurrTime = currTime;						

	// 이 시간과 이전 프레임의 시간의 차이를 구한다.
	mDeltaTime = (mCurrTime - mPrevTime) * mSecondsPerCount;	

	// 다음 프레임을 준비한다.
	mPrevTime = mCurrTime;

	// 음수가 되지 않게 한다.
	if(mDeltaTime < 0.0)
	{
		mDeltaTime = 0.0;
	}
}

// 경과 시간 반환 메서드
float GameTime::DeltaTime() const
{
	return ()

참고.
- SDK 문서화의 CDXUTTimer 항목에 따르면, 프로세서가 절전 모드로 들어가거나 다른 프로세서와 엉킬 경우 mDeltaTime이 음수가 될 수 있다.

그림.
PrevTime -----> Work -----> Update CurrTime, DeltaTime and PrevTime ----> Work ----->...
// PrevTime은 초기에는 0으로 설정되어 있다.





● 전체 시간
- 전체 시간을 구현하기 위해 GameTime 클래스는 다음과 같은 멤버 변수들을 사용한다.
① __int64 mBaseTime;		: 응용 프로그램이 시작한 시간 (고정 값)
② __int64 mPausedTime;		: 일시정지된 이후 다시 응용 프로그램이 시작 하기 전까지 누적된 시간
③ __int64 mStopTime;		: 일시정지된 시점의 시간	
- 전체 시간을 구현하기 위해 GameTime 클래스는 다음과 같은 메서드들을 사용한다.
① void Gametimer::Stop()	: 일시정지 상태로 돌입하면, 일시정지된 시점을 mStopTime에 저장한다. for. 누적 시간을 구함.
코드.
void GameTimer::Stop()
{
	// 이미 정지 상태면 아무 일도 하지 않는다.
	if(!mStopped)
	{
		__int64 currTime;
		QueryPerformanceCounter((LARGE_INTEGER*) &currTime);

		// 그렇지 않다면 중단 시간(일시 정지된 시점의 시간)을 저장하고,
		// 타이머가 중단되었음을 뜻하는 부울 플래그를 설정한다.
		mStopTime = currtime;
		mStopped = true;
	}
}
② void GameTimer::Start()	: 일시정지 상태에서 시작 상태로 돌입하면, 일시정지때 누적된 시간을 mPausedTime에 저장한다. for. 전체 시간을 구함.
코드.
void GameTimer::Start()		
{
	__int64 startTime;
	QueryPerformanceCounter((LARGE_INTEGER*) &startTime);

	// 중단 상태에서 타이머를 다시 재개하는 경우라면...
	if(mStopped)
	{
		// 일시정지 시간을 누적한다.
		mPausedTime += (startTime - mStopTime);

		// 타이머를 다시 시작하는 것이므로 mPrevTime(이전 시간)의 현재 값은
		// 유효하지 않다. (일시정지 도중에 갱신된 값이기 때문)
		// 따라서 현재 시간으로 다시 설정한다.
		mPrevTime = startTime;
		// 더 이상은 중단 상태가 아님...
		mStopTime = 0;
		mStopped = false;
	}
}
③ float GameTimer::TotalTime() const
코드. 
float GameTimer::TotalTime() const
{
	// 현재 타이머가 중단 상태이면 중단된 후로부터 흐른 시간을 계산하지 말아야 한다. Q. 어떤 계산?
	// 또한 이전에 일시 정지된 적이 있다면 그 시간도 전체 시간에 포함시키지 말아야 한다. => 뺀다.
	// 이를 위해 mStopTime에서 일시정지 시간을 뺀다.

	if(mStopped)		// 일시 정지 도중에 전체 시간을 반환받고자 하는 경우
	{
		return (float)(((mStopTime - mPausedtime)- mBaseTime) * mSecondsPerCount);
	}

	// 시간차 mCurrTime - mBaseTime에는 일시 정지된 시간이 포함되어 있다. 
	// 이를 전체 시간에 포함시키면 안 되므로, 그 시간을 mCurrTime에서 제한다.

	else			// 응용 프로그램이 실행 도중 전체 시간을 반환받고자 하는 경우
	{
		return (float) (((mCurrTime - mPausedTime) - mBaseTime) * mSecondsPerCount);
	}
}