● Direct3D 초기화 과정 단계
① D3D11CreateDevice 함수를 이용해서 장치, 즉 ID3D11Device 인터페이스와 장치 문맥,
즉 ID3D11DeviceContext 인터페이스를 생성한다.
② ID3D11Device::CheckMultisampleQualityLevels 메서드를 이용해서 4X MSAA 품질 수준 지원
여부를 점검한다.
③ 생성할 교환 사슬의 특성을 서술하는 DXGI_SWAP_CHAIN_DESC 구조체를 채운다.
④ 장치를 생성하는 데 사용했던 IDXGIFactory 인터페이스를 질의해서 IDXGISwapChain 인스턴스를
생성한다.
⑤ 교환 사슬의 후면 버퍼에 대한 렌더 대상 뷰를 생성한다.
⑥ 깊이·스텐실 버퍼와 그에 연결되는 깊이·스텐실 뷰를 생성한다.
⑦ 렌더 대상 뷰와 깊이·스텐실 뷰를 Direct3D가 사용할 수 있도록 렌더링 파이프라인의 출력 병합기
단계에 묶는다.
⑧ 뷰포트를 설정한다.


● 1. D3D11CreateDevice 함수를 이용해서, ID3D11Device 인터페이스(장치)와 ID3D11Device 인터페이스(장치 문맥)을 생성한다.
- ID3D11Device : 기능 지원 점검과 자원 할당에 쓰임
- ID3D11DeviceContext : 렌더 대상을 설정, 자원을 그래픽 파이프라인에 결속, GPU 렌더링 명령 지시에 쓰임.

코드.
UINT createDeviceFlags = 0;

#if defined(DEBUG) || defined(_DEBUG)				// 현재 컴파일 모드가 DEBUG로 설정되었을 시
	createDeviceFlags |= D3D11_CREATE_DEVICE_DEBUG;		// 디버그 계층을 활성화한다. 
#endif

D3D_FEATURE_LEVEL featureLevel;			// 기능 수준
ID3D11Device* md3dDevice;			// 장치 인터페이스를 가리키기 위한 포인터
ID3D11DeviceContext* md3dImmediateContext;	// 장치 문맥 인터페이스를 가리키기 위한 포인터
HRESULT hr = D3D11CreateDevice(
①	0,				// 기본 디스플레이 어댑터의 인덱스
②	D3D_DRIVER_TYPE_HARDWARE,	// 렌더링에 3차원 그래픽 가속 적용
③	0, 				// 하드웨어 구동기 사용
④	createDeviceFlags,		// 추가적인 장치 생성 플래그 // DEBUG 모드시 디버그 계층 활성화
⑤	0,				// 지원되는 최고 기능 수준을 택함
⑥	0,				// 기능 수준 배열(pFeatureLevels)의 원소 개수
⑦	D3D11_SDK_VERSION,		// 항상 D3D11_SDK_VERSION로 설정한다.
⑧	&md3dDevice,			// 생성한 장치 인터페이스 포인터 반환
⑨	&featureLevel,			// 기능 수준 배열에서 처음으로 지원되는 기능 수준 반환
⑩	&md3dImmediateContext		// 생성한 장치 문맥 인터페이스 포인터 반환
)

② D3D_DRIVER_TYPE DriverType
⒜ D3D_DRIVER_TYPE_HARDWARE		: 렌더링에 3차원 그래픽 가속 적용
⒝ D3D_DRIVER_TYPE_REFERENCE		: 표준 장치(정확성을 목표로 하는 Direct3D의 소프트웨 구현) 생성
ref. 표준 장치의 주된 용도
- 하드웨어가 지원하지 않는 기능을 시험	// Direct3D 11을 지원하는 그래픽 카드가 없는 경우
- 하드웨어 구동기의 버그를 실험
⒞ D3D_DRIVER_TYPE_SOFTWARE		: 3차원 하드웨어를 흉내 내는 소프트웨어 구동기를 생성
ref. Direct3D가 제공하는 소프트웨어 구동기는 WARP 구동기뿐이다.
⒟ D3D_DRIVER_TYPE_WARP			: 고성능 Direct3D 10.1 소프트웨어 구동기를 생성 // Direct3D 11과는 연관이 없다.  
ref. WARP : Windows Advanced Rasterization Platform

④ UINT Flags
⒜ D3D11_CREATE_DEVICE_DEBUG		: 디버그 모드 빌드에서 디버그 계층을 활성화
⒝ D3D11_CREATE_DEVICE_SINGLETHREADED	: Direct3D가 여러 개의 스레드에서 호출되지 않는다는 보장하에, 성능 향상
ref. D3D11_CREATE_DEVICE_SINGLETHREADED 지정 시 ID3D11Device::CreateDeferredContext 호출 실패





● 2. 4X MSAA 품질 수준 지원 점검
- 모든 Direct3D 11 대응 장치는 모든 렌더 대상 (텍스처) 형식에 대해 4X MSAA를 지원한다. // 품질 수준 정의는 제조사마다 다름.

코드.
UINT m4xMsaaQuality;						// 품질 수준
HR(md3dDevice->CheckMultisampleQualityLevels(			// 주어진 텍스처 형식(DXGI_FORMAT_~)과 부분 픽셀 수(SampleCount)에 대한   
	DXGI_FORMAT_R8G8B8A8_UNORM, 4, &m4xMsaaQuality));	// 품질 수준을 얻는다.
assert(m4xMassQuality>0)					// 품질 수준이 0 이하(거짓)라면, 프로그램 정지 후 오류를 띄운다.





● 3. 교환 사슬의 설정
- DXGI_SWAP_CHAIN_DESC 구조체의 인스턴스를 정의하여 교환 사슬의 특성들을 설정해야 한다.
typedef struct DXGI_SWAP_CHAIN_DESC {
①	DXGI_MODE_DESC BufferDesc;		// 생성하고자 하는 후면 버퍼의 속성들을 서술
②	DXGI_SAMPLE_DESC SampleDesc;		// 다중표본화(MSAA)를 위해 추출할 표본 개수(SampleCount)와 품질 수준(Qulity)을 서술
③	DXGI_USAGE BufferUsage;			// 버퍼의 용도 (일반적으로, DXGI_USAGE_RENDER_TARGET_OUTPUT으로 지정)
④	UINT BufferCount;			// 교환 사슬에 사용할 후면 버퍼의 개수 (일반적으로 한 개를 설정 => 더블 버퍼링)
⑤	HWND OutputWindow;			// 렌더링 결과를 표시할 창의 핸들값
⑥	BOOL Windowed;				// 창 모드 시 -> true, 전체화면 모드 시 -> false;
⑦	DXGI_SWAP_EFFECT SwapEffect;		// 교환 효과 서술 (일반적으로, DXGI_SWAP_EFFECT_DISCARD로 지정)
⑧	UINT Flags;				// 추가적인 플래그
} DXGI_SWAP_CHAIN_DESC;

① DXGI_MODE_DESC
typedef struct DXGI_MODE_DESC
{
	UINT Width;					// 원하는 후면 버퍼 너비
	UINT Height;					// 원하는 후면 버퍼 높이
	DXGI_RATIONAL RefreshRate;			// 디스플레이 모드 갱신율 (Numerator/Denominator)
	DXGI_FORMAT Format;				// 후면 버퍼 픽셀 형식 (일반적으로, DXGI_FORMAT_R8G8B8A8_UNORM)
	DXGI_MODE_SCANLINE_ORDER ScanlineOrdering;	// 디스플레이 스캔라인 모드 (DXGI_MODE_SCANLINE_ORDER_NSPECIFIED)
	DXGI_MODE_SCALING Scaling;			// 디스플레이 비례 모드 (DXGI_MODE_SCALING_UNSPECIFIED)
} DXGI_MODE_DESC;

⑧ UINT Flags
- DXGI_SWAP_CHAIN_FLAG_ALLOW_MODE_SWITCH를 지정하면, 응용 프로그램이 전체화면 모드로 전환할 때 '현재의 후면 버퍼' 설정에 가장 잘 부합하는
디스플레이 모드가 자동으로 선택된다.
이를 지정하지 않으면 응용 프로그램이 전체화면 모드로 전환할 때 '현재의 데스크톱 디스플레이 모드'가 사용된다.
// 대부분의 데스크톱 디스플레이는 모니터의 최적 해상도에 맞게 설정되어 있으므로 설정하지 않아도 잘 돌아간다.

코드.
DXGI_SWAP_CHAIN_DESC sd;
sd.BufferDesc.Width			= mClientWidth;		//창의 클라이언트 영역 크기를 사용
sd.BufferDesc.Height			= mClientHeight;	
sd.BufferDesc.RefreshRate.Numerator	= 60;
sd.BufferDesc.RefreshRate.Denominator	= 1;
sd.BufferDesc.Format			= DXGI_FORMAT_R8G8B8A8_UNORM;
sd.BufferDesc.ScanlineOrdering		= DXGI_MODE_SCANLINE_ORDER_NSPECIFIED;
sd.BufferDesc.Scaling			= DXGI_MODE_SCALING_UNSPECIFIED;

//4X MSAA를 사용하는가?
if( mEnable4xMsaa )
{
	sd.SampleDesc.Count = 4;	// 한 픽셀에 대한 표본 픽셀 수
	
	// m4xMsaaQuality는 CheckMultisampleQualityLevels()로 얻은 것이다.
	sd.SampleDesc.Quality = m4xMsaaQuality - 1;
}
else
{
	sd.SampleDesc.Count	= 1;
	sd.SampleDesc.Quality	= 0;
}

sd.BufferUsage				= DXGI_USAGE_RENDER_TARGET_OUTPUT;
sd.BufferCount 				= 1;
sd.OutputWindow				= mhMainWnd;
sd.Windowed				= true;
sd.SwapEffect				= DXGI_SWAP_EFFECT_DISCARD;
sd.Flags 				= 0;

참고. 후면 버퍼에 대해 DXGI_FORMAT_R8G8B8A8_UNORM을 쓰는 이유
- 일반적으로 모니터의 색상당 비트 수가 24비트 이하이기 때문.
- 알파값은 모니터에 직접 출력되는 것은 아니나 몇 가지 특수 효과를 사용할 수 있도록 함.





● 4. 교환 사슬의 생성
- IDXGIFactory 인스턴스의 IDXGIFactory::CreateSwapChain메서드를 통해 교환 사슬을 생성한다.
- IDXGIFactory 인스턴스를 생성하는 방법에는 다음과 같은 것이 있다.
① CreateDXGIFactory 함수(dxgi.lib를 링크)를 이용하여 생성하는 방법
=> 하지만 이 방법은 오류가 난다. 따라서 다음의 ②번 방법을 사용한다.
② 일련의 COM 질의 과정을 거쳐서 생성하는 방법
=> 다음의 코드에서 제시한다.

코드.
IDXGIDevice* dxgiDevice = 0;	//ID3D11Device가 아니다.
HR(md3dDevice->QueryInterface(__uuidof(IDXGIDevice), (void**)&dxgiDevice));	//md3dDevice를 기반으로 dxgiDevice를 얻는다.

IDXGIAdapter* dxgiAdapter = 0;
HR(dxgiDevice->GetParent(__uuidof(IDXGIAdapter), (void**)&dxgiAdapter));	// dxgiDevice를 기반으로 dxgiAdapter를 얻는다.

IDXGIFactory* dxgiFactory = 0;
HR(dxgiAdapter->GetParent(__uuidof(IDXGIFactory), (void**)&dxgiFactory));	// dxgiAdapter를 기반으로 dxgiFactory를 얻는다.

IDXGISwapChain* mSwapChain;
HR(dxgiFactory->CreateSwapChain(md3dDevice, &sd, &mSwapChain));			// dxgiFactory로부터 스왑체인을 생성한다.

// 획득한 COM 인터페이스들을 해제한다.
ReleaseCOM(dxgiDevice);
ReleaseCOM(dxgiAdapter);
ReleaseCOM(dxgiFactory);





● 5. 렌더 대상 뷰의 생성
- 후면 버퍼는 파이프라인의 '출력 병합기(Output Merger)단계'에 묶으려면, 렌더 대상 뷰가 필요하며, 이를 묶어야 한다.

코드.
ID3D11RenderTargetView* mRenderTargetView;
ID3D11Texture2D* backBuffer;
// 스왑 체인의 0번째 인덱스의 후면 버퍼 포인터를 ID3D11Texture2D 형식으로 얻는다. 위 교환 사슬 생성부도 마찬가지.
mSwapChain->GetBuffer(0, __uuidof(ID3D11Texture2D), reinterpert_cast<void**>(&backBuffer));	
// backBuffer를 기반으로 자원의 첫 번째 밉맵 수준에 대한 뷰(mRenderTargetView)를 생성한다.
md3dDevice->CreateRenderTargetView(backBuffer, 0, &mRenderTargetView);
// 획득한 COM 인터페이스를 해제한다.
ReleaseCOM(backBuffer); // backBuffer는 후면 버퍼를 가리키는 인터페이스 포인터로 후면 버퍼 그 자체가 아님을 주의하자!

참고.
- md3dDevice->CreateRenderTargetView(backBuffer, 0, &mRenderTargetView);의 두 번째 매개변수는
D3D11_RENDER_TARGET_VIEW_DESC 구조체를 가리키는 포인터이다. 이를 통해, 무형식 자원의 자료 형식을 구체적으로 서술한다.
교환 사슬의 설정(DXGI_SWAP_CHAIN_DESC) 시 DXGI_MODE_DESC의 Format을 정의하였다면 널 값(0)을 지정해도 된다.





● 6. 깊이·스텐실 버퍼와 뷰 생성
- 깊이·스텐실 버퍼는 그냥 깊이와 스텐실 값을 담는 2차원 텍스처이다.
- 2차원 텍스처를 생성할 때에는 텍스처를 서술하는 D3D11_TEXTURE2D_DESC 구조체를 채우고 ID3D11DeviceLLCreateTexture2D 메서드를 호출하면 된다.
typedef struct D3D11_TEXTURE2D_DESC {
①	UINT Width;
②	UINT Height;
③	UINT MipLevels;				// 밉맵 수준의 개수로, 깊이·스텐실 버퍼를 위한 텍스처에서는 밉맵 수준이 하나만 있으면 된다.
④	UINT ArraySize;				// 텍스처 배열의 텍스처 개수로, 깊이·스텐실 버퍼의 경우에는 텍스처 하나만 필요하다.
⑤	DXGI_FORMAT Format;			// 텍스처 형식은 렌더 대상의 그것과 같지 않아도 된다.
⑥	DXGI_SAMPLE_DESC SampleDesc;
⑦	D3D11_USAGE Usage;
⑧	UINT BindFlags;
⑨	UINT CPUAccessFlags;
⑩	UINT MiscFlags;				// 기타 플래그로 깊이·스텐실 버퍼에는 적용되지 않으므로 그냥 0을 지정한다.
} D3D11_TEXTURE2D_DESC;

⑤ DXGI_FORMAT Format
- 텍셀의 형식을 뜻하는 필드로, 깊이·스텐실 버퍼의 경우 다음 4가지 중 하나를 사용한다.
⒜ DXGI_FORMAT_D32_FLOAT_S8X24_UINT
⒝ DXGI_FORMAT_D32_FLOAT
⒞ DXGI_FORMAT_D24_UNORM_S8_UINT
⒟ DXGI_FORMAT_D16_UNORM

⑥ DXGI_SAMPLE_DESC SampleDesc
- 다중 표본 개수와 품질 수준을 서술하는 구조체이다.
- 깊이·스텐실 버퍼를 위한 다중표본화 설정은 렌더 대상에 쓰인 설정(위 sd.SampleDesc)과 일치해야 한다.

⑦ D3D11_USAGE Usage
- 텍스처의 용도를 뜻하는 필드이다. 다음 4개 중 하나를 지정한다.
⒜ D3D11_USAGE_DEFAULT		: 오직 GPU에 의해서 읽고 쓰기 접근이 가능.
⒝ D3D11_USAGE_IMMUTABLE	: GPU에서 읽기만 가능. CPU에서 접근 금지! (한번 생성되고 변하지 않는다면. 이렇게...)
⒞ D3D11_USAGE_DYNAMIC		: GPU에서 읽기만, CPU에서는 쓰기만... Map method를 사용				// 되도록 피하는 것이 좋다.
⒟ D3D11_USAGE_STAGING		: GPU에서 CPU로 값을 전달. => ID3D11DeviceContext::CopyResource 메서드 사용.	// 되도록 피하는 것이 좋다.
- 깊이·스텐실 버퍼에 대한 모든 읽기 및 쓰기는 GPU가 수행하므로 깊이·스텐실 버퍼 생성 시 'D3D11_USAGE_DEFAULT'를 사용한다.

⑧ UINT BindFlags
- 자원을 파이프라인에 어떤 식으로 묶을 것인지 나타내는 결속 플래그로 OR로 결합할 수 있다.
- 다음과 같은 플래그들이 존재한다.
⒜ D3D11_BIND_DEPTH_STENCIL
⒝ D3D11_BIND_RENDER_TARGET
⒞ D3D11_BIND_SHADER_RESOURCE

⑨ UINT CPUAccessFlags
- CPU가 자원에 접근하는 방식을 결정하는 플래그들을 지정한다.
- 플래그들은 다음과 같은 것이 있으며, 오른쪽에는 해당 플래그를 사용하기 위한 BindFlags 목록을 보여준다.
⒜ D3D11_CPU_ACCESS_WRITE	// D3D11_USAGE_DYNAMIC or D3D11_USAGE_STAGING 
⒝ D3D11_CPU_ACCESS_READ	// D3D11_USAGE_STAGING
⒞ 0 // 텍스처 자원에 CPU가 개입하지 않는다.

코드.
D3D11_TEXTURE2D_DESC depthStencilDesc;
depthStencilDesc.Width		= mClientWidth;
depthStencilDesc.Height		= mClientHeight;
depthStencilDesc.MipLevels	= 1;
depthStencilDesc.ArraySize	= 1;
depthStencilDesc.Format		= DXGI_FORMAT_D24_UNORM_S8_UINT;

// 4x MSAA를 사용하는가? 반드시 교환 사슬의 MSAA 설정과 일치해야 함.
if( mEnable4xMsaa )
{
	depthStencilDesc.SampleDesc.Count = 4;	// 한 픽셀에 대한 표본 픽셀 수
	
	// m4xMsaaQuality는 CheckMultisampleQualityLevels()로 얻은 것이다.
	depthStencilDesc.SampleDesc.Quality = m4xMsaaQuality - 1;
}
else
{
	depthStencilDesc.SampleDesc.Count	= 1;
	depthStencilDesc.SampleDesc.Quality	= 0;
}

depthStencilDesc.Usage		= D3D11_USAGE_DEFAULT;		// 오직 GPU의 읽기&쓰기만 가능
depthStencilDesc.BindFlags	= D3D11_BIND_DEPTH_STENCIL;
depthStencilDesc.CPUAccessFlags	= 0;
depthStencilDesc.MiscFlags	= 0;

ID3D11Texture2D* mDepthStencilBuffer;
ID3D11DepthStencilView* mDepthStencilView;

HR(md3dDevice->CreateTexture2D(
	&depthStencilDesc,		// 생성할 텍스처를 서술하는 구조체
	0,				// 텍스처에 채울 초기 자료를 가리키는 포인터
	&mDepthStencilBuffer));		// 깊이·스텐실 버퍼를 가리키는 인터페이스 포인터

HR(md3dDevice->CreateDepthStencilView(
	mDepthStencilBuffer,		// 뷰를 생성하고자 하는 자원
	0,				// D3D11_DEPTH_STENCIL_VIEW_DESC 구조체. 무형식 자원의 자료 형식을 구체적으로 서술한다.
	&mDepthStencilView));		// 뷰에 대한 인터페이스 => 자원의 첫 번째 밉맵 수준에 대한 뷰를 생성한다.

참고.
- 깊이·스텐실 버퍼는 깊이 버퍼링과 스텐실 연산을 수행할 때 Direct3D가 직접 깊이·스텐실 버퍼를 기록한다.
따라서, md3dDevice->CreateTexture2D()의 두 번째 매개변수에 널 값을 설정한다.





● 7. 뷰들을 출력 병합기 단계에 묶기
- 다음의 코드를 통해 렌더 대상과 깊이·스텐실 버퍼가 렌더링 파이프라인 내 출력 병합기 단계에서 작동하게 된다.
코드.
md3dImmediateContext->OMSetRenderTargets(
	1, &mRenderTargetView, mDepthStencilView);

참고.
- mRenderTargetView는 배열 형태로 여러 개의 렌더 대상을 사용할 수 있다. (고급 기법)
- OMSetRenderTargets()의 첫 번째 매개변수는 묶고자 하는 렌더 대상(후면 버퍼)의 개수를 의미한다. 
- 깊이·스텐실 버퍼는 하나만 묶을 수 있다.





● 8. 뷰포트 설정
- 뷰포트는 장면을 그려 넣고자 하는 후면 버퍼의 부분직사각형 영역을 의미한다.
- ID3D11DeviceContext::RSSetViewports 메서드를 통해 래스터화기 단계에 뷰포트를 설정한다.
typedef struct D3D11_VIEWPORT {
	FLOAT TopLeftX;			// 응용 프로그램 창의 클라이언트 영역 직사각형(이하 클라이언트 창) 시작점의 x값
	FLOAT TopLeftY;			// 클라이언트 창 시작점의 y값
	FLOAT Width;			// 클라이언트 창의 너비
	FLOAT Height;			// 클라이언트 창의 높이
	FLOAT MinDepth;			// 최소 깊이 버퍼 값으로 일반적으로 0을 사용한다.
	FLOAT MaxDepth;			// 최대 깊이 버퍼 값으로 일반적으로 1을 사용한다.
} D3D11_VIEWPORT;

코드.
D3D11_VIEWPORT vp;
vp.TopLeftX	= 0.0f;
vp.TopLeftY	= 0.0f;
vp.Width	= static_cast<float> (mClientWidth);
vp.Height	= static_cast<float> (mClientHeight);
vp.MinDepth	= 0.0f;
vp.MaxDepth	= 1.0f;

md3dImmediateContext->RSSetViewports(1, &vp);

참고.
- vp는 배열 형태로 여러 개의 뷰포트를 사용할 수 있다. (고급 기법)
- RSSetViewports()의 첫 번째 매개변수는 묶고자 하는 뷰포트의 개수를 의미한다.