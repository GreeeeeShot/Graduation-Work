[법선 벡터]
● 법선 벡터 종류
① 면 법선(face normal)		: 다각형(일반적으로 삼각형)의 모든 점에 수직인 단위벡터
② 표면 법선(surface normal)	: 표면의 한 점의 접평면에 수직인 단위벡터





● 법선 벡터 계산
- 정점 법선 평균 : 모든 면 법선의 평균으로 근사하는 방법으로 메시가 미분 가능이 아닐 때 주로 쓰는 방법으로
모든 표면의 한 점을 공유하는 모든 면들의 면 법선 벡터를 합산하여 정규화하는 것이다.
// 좀 더 정밀한 방법으로 가중(면적 정도 등) 평균을 쓰는 방법이 있다.
코드.





● 법선 벡터 변환
- 어떤 법선 벡터에 비균등 비례 변환(또는 전단 변환) A를 적용한다면, 해당 법선 벡터는 더 이상 그 역할을 하지 못할 수 있다.
이를 방지하기 위하여, 비균등 비례 변환에 한해서 'A의 역전치행렬'을 법선 벡터에 적용한다.
- 이때 변환 행렬 A가 직교행렬이라면, A^T = A^-1이 성립하므로, (A^-1)^T = (A^T)^T = A라 할 수 있다.
코드.
static XMMATRIX InverseTranspose(CXMMATRIX M)
{
	XMMATRIX A = M;
	A.r[3] = XMVectorSet(0.0f, 0.0f, 0.0f, 1.0f);

	XMVECTOR det = XMMatrixDeterminant(A);
	return XMMatrixTranspose(XMMatrixInverse(&det, A));
}





[재질]
● 재질
- 빛이 물체의 표면과 상호작용하는 방식을 결정하는 속성들의 집합으로, 
쉽게 '빛 반사 정도'를 규정한다. 
코드.
struct Material
{
	Material() { ZeroMemory(this, sizeof(this)); }

	XMFLOAT4 Ambient;
	XMFLOAT4 Diffuse;	// w = Alpha
	XMFLOAT4 Specular;	// w = SpecPower;
	XMFLOAT4 Reflect;
}





[빛을 구성하는 요소]
● 람베르트 코사인 법칙
- 빛의 세기(스칼라)를 정의하는 법칙
수식.
f(θ) = max(cos(θ), 0) = max(L·n, 0)		// L : 빛 벡터(단위벡터), n : 표면의 법선 벡터(단위벡터)
// 90도는 1.57라디안에 근사한다.





● 분산광 조명(Diffuse)
- '시점에 독립적'으로, 빛이 표면 위쪽의 모든 방향으로 고르게 분산된다고 가정한다.
수식.
cd = kd·ldΘmd = kdD	// kd = max(L·n, 0), ld : 입사 분산광, md : 분산광 재질 색상, Θ : 성분곱





● 주변광 조명(Ambient)
- 광원에서 간접적으로 표면에 도달한 빛을 흉내내는 조명이다.
- 모든 주변광은 물체를 균일하게 비춘다고 가정하기에, 물리적인 물리 계산(입사각에 따른 또는 거리에 따른 빛의 세기)을
필요로 하지 않는다.
수식.
ca = laΘma = A





● 반영광 조명(Specular)
- 특정 방향으로 반사되는 빛으로, 시점에 따라 인식되지 않을 수 있다. 또한 빛이 보인다고 하더라도
시점이 이동함에 따라 반영광의 양(빛의 세기)도 변할 수 있다. => '시점에 의존적'이다.
- 반사 원뿔은 반영광이 반사되는 영역(반짝임 정도)을 규정한다.
수식.
cs = ks·lsΘms = lsS
ks =┌ max(v·r, 0)^p,	L·n > 0
    └ 0, 		L·n <= 0
// r = I - 2(n·I)n





● 최종 조명 수식 방정식
수식.
LitColor = laΘma + kd·ldΘmd + ks·lsΘms = A + kdD + ksS
kd = max(L·n, 0)
ks =┌ max(v·r, 0)^p,	L·n > 0
    └ 0, 		L·n <= 0





[광원의 종류]
● 평행광
- 아주 멀리 있는 광원에서 오는 빛을 흉내낸 광원으로, 하나의 입사광 방향 벡터로 정의된다.
수식.
LitColor = laΘma + kd·ldΘmd + ks·lsΘms = A + kdD + ksS
kd = max(L·n, 0)
ks =┌ max(v·r, 0)^p,	L·n > 0
    └ 0, 		L·n <= 0





● 점광
- 모든 방향으로 빛을 내뿜는 광원으로, 모든 점마다 빛 벡터를 달리 계산해야 한다.
// 평행광의 경우에는 모든 점에 대해 동일한 빛 벡터를 사용한다.
- '빛의 감쇠 개념'과 '범위' 개념이 적용된다.
수식.
LitColor = laΘma + (kd·ldΘmd + ks·lsΘms) / (a0 +a1d +a2d^2) = A + (kdD + ksS) / (a0 +a1d +a2d^2) 
kd = max(L·n, 0)
ks =┌ max(v·r, 0)^p,	L·n > 0
    └ 0, 		L·n <= 0






● 점적광
- 점적광 위치 Q에서 d 방향으로 뻗어 나가는 원뿔 형태의 빛이다.
- 원뿔 형태 안에 표면의 점이 존재해야, 빛을 적용받으며 안쪽에 있을 수록 빛의 세기가 강하다.
- '빛의 감쇠 개념'과 '범위' 개념이 적용된다.
수식.
LitColor = kspot(laΘma + (kd·ldΘmd + ks·lsΘms) / (a0 +a1d +a2d^2)) = kspot(A + (kdD + ksS) / (a0 +a1d +a2d^2)) 
kd = max(L·n, 0)
ks =┌ max(v·r, 0)^p,	L·n > 0
    └ 0, 		L·n <= 0
kspot(Φ) = max(cos(Φ), 0) ^s = max(-L·d, 0)^s
// s = 8로 두면 원뿔의 반각은 약 45도가 된다.				(★)
// 계산 비용 : 평행광 < 점광 < 점적광